import groovy.xml.XmlUtil

class PrepareShortcutTask extends DefaultTask {

    @OutputDirectory
    File outputDir

    @InputFile
    File shortcutFile

    @Input
    String applicationId

    @TaskAction
    void prepare() {
        def shortcuts = new XmlSlurper(false, false).parse(shortcutFile)
        shortcuts.shortcut.each {
            it.intent.each {
                it.attributes().put('android:targetPackage', applicationId)
            }
        }
        outputDir.mkdirs()
        def xmlUtil = new XmlUtil()
        def fw = new FileWriter(project.file("$outputDir/${shortcutFile.name}"))
        xmlUtil.serialize(shortcuts, fw)
        fw.close()
    }
}

class ShortcutHelperExtension {
    public static final String EXTENSION_NAME = "shortcutHelper"

    //Path to the shortcut.xml
    File filePath

    private final Project project

    ShortcutHelperExtension(Project project) {
        this.project = project
    }

    void setFilePath(filePath) {
        if (!filePath || filePath.empty) {
            throw new GradleException('File path cannot be null or empty!')
        }

        if (filePath instanceof File) {
            this.filePath = filePath
        } else {
            this.filePath = project.file(filePath)
        }

        if (!this.filePath.file || !this.filePath.exists()) {
            throw new GradleException('File path must contain XML file!')
        }
    }
}

class GreetingExtensionPlugin implements Plugin<Project> {

    @Override
    void apply(Project project) {

        // Add the 'greeting' extension object
        def extension = project.extensions.create(ShortcutHelperExtension.EXTENSION_NAME, ShortcutHelperExtension, project)
        project.afterEvaluate {
//            getProjectBuildVariants(projecet).all
            if (project.plugins.hasPlugin("android")) {
                project['android'].getApplicationVariants().all {
                    def applicationId = it.applicationId
                    def outputDir = project.file("$project.buildDir/generated/res/resValues/$it.dirName/xml")
                    def task = project.tasks.create("prepare${it.name.capitalize()}ShortcutXML", PrepareShortcutTask) {
                        it.outputDir = outputDir
                        it.shortcutFile = extension.filePath
                        it.applicationId = applicationId
                    }

                    def actualMethodMissing = it.metaClass.methodMissing
                    it.metaClass.methodMissing = { String name, args ->
                        if (name == "registerGeneratedResFolders") {
                            it.registerResGeneratingTask(task, outputDir)
                        } else {
                            actualMethodMissing.invokeMethod(name, args)
                        }
                    }
                    it.registerGeneratedResFolders(project.files(outputDir).builtBy(task))
                }
            }

        }

    }
//    private static DefaultDomainObjectSet<? extends BaseVariant> getProjectBuildVariants(Project project) {
//        if (project.plugins.hasPlugin("android")) {
//            final AppExtension appExtension = project['android']
//            return appExtension.getApplicationVariants()
//        } else if (project.plugins.hasPlugin('android-library')) {
//            final LibraryExtension libraryExtension = project['android-library']
//            return libraryExtension.getLibraryVariants()
//        } else {
//            throw new GradleException("Set android build types first")
//        }
//    }
}


//引入插件
apply plugin: GreetingExtensionPlugin
shortcutHelper.filePath = './shortcuts_dynamic.xml'